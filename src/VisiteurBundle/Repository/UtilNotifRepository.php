<?php

namespace VisiteurBundle\Repository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use UserBundle\Entity\Utilisateur;
use DateTime;
/**
 * UtilNotifRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilNotifRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Utilisateur $utilisateur
     * @param DateTime $dateDebut
     * @param DateTime $dateFin
     * @return Collection
     */
    public function getNotifications(Utilisateur $utilisateur, DateTime $dateDebut, DateTime $dateFin) {


        $queryBuilder = $this
            ->createQueryBuilder('notifications')
            ->select('n , u')
            ->from('VisiteurBundle:Notification', 'n')
            ->from('VisiteurBundle:UtilNotif', 'u')
            ->where('u.notif = n.id')
            ->andWhere('u.utilisateur = :utilisateur')
            ->andWhere('n.datetime >= :date_debut')
            ->andWhere('n.datetime < :date_fin')
            ->orderBy('n.datetime', 'desc')
            ->setParameter('date_debut', $dateDebut)
            ->setParameter('date_fin', $dateFin)
            ->setParameters([
                'date_debut' => $dateDebut,
                'date_fin' => $dateFin,
                'utilisateur' => $utilisateur
            ])
        ;


        return new ArrayCollection($queryBuilder->getQuery()->getResult());
    }

    public function getUtilisateursNotifications(Utilisateur $utilisateur, DateTime $dateDebut, DateTime $dateFin) {
        $queryBuilder = $this
            ->createQueryBuilder('notifications')
            ->select('u')
            ->from('VisiteurBundle:Notification', 'n')
            ->from('VisiteurBundle:UtilNotif', 'u')
            ->where('u.notif = n.id')
            ->andWhere('u.utilisateur = :utilisateur')
            ->andWhere('n.datetime >= :date_debut')
            ->andWhere('n.datetime < :date_fin')
            ->orderBy('n.datetime', 'desc')
            ->setParameter('date_debut', $dateDebut)
            ->setParameter('date_fin', $dateFin)
            ->setParameters([
                'date_debut' => $dateDebut,
                'date_fin' => $dateFin,
                'utilisateur' => $utilisateur
            ])
        ;


        return new ArrayCollection($queryBuilder->getQuery()->getResult());
    }

    public function getNbNotifNonLu(Utilisateur $utilisateur) {
        $qb = $this
            ->createQueryBuilder('u');

        $qb->select($qb->expr()->count('u'))
            ->innerJoin('u.notif', 'n')
            ->andWhere('u.utilisateur = :utilisateur')
            ->andWhere('u.lu = 0')
            ->andWhere('u.notif = n.id')
            ->setParameters([
                'utilisateur' => $utilisateur
            ]);
        ;


        return $qb->getQuery()->getResult()[0][1];
    }


    /**
     * @param Utilisateur $utilisateur
     * @param int $nbNotif
     * @return array
     */
    public function getNotifNonLu(Utilisateur $utilisateur, $nbNotif) {//Ce code n'a jamais été testé (Impossible de déclarer des types primitifs en php.

        /*  ->createQuery("SELECT n FROM VisiteurBundle:Notifications n WHERE n.id=:idParam AND MONTH(n.datetime)=3")
      ->setParameter('idParam', $idNotif );*/

        $em = $this->getEntityManager();
        $query = $em
            ->createQuery("SELECT n FROM VisiteurBundle:Notification n , VisiteurBundle:UtilNotif u 
WHERE u.utilisateur = :user AND u.notif = n.id AND u.lu=0 ORDER BY n.datetime DESC")
            ->setParameter('user', $utilisateur )
            ->setMaxResults($nbNotif);

           /* ->createQuery('notifications')

            ->select('n')
            ->from('VisiteurBundle:UtilNotif', 'u')
            ->from('VisiteurBundle:Notification', 'n')
            ->from('UserBundle:Utilisateur', 'user')
            ->andWhere('u.utilisateur = user')
            ->andWhere('u.utilisateur = :utilisateur')
            ->andWhere('u.lu = 0')
            ->andWhere('u.notif = n.id')
            ->orderBy('n.datetime', 'DESC')
            ->setMaxResults('5')
            ->setParameters([
                'utilisateur' => $utilisateur
            ])
        ;*/


        return $query->getResult();
    }
}
